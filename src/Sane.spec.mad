import type { Attribute } from "@/Sane"

import { report } from "Study"
import { parseTest } from "Study/Parse"

import {
  Attribute,
  Declaration,
  EmptyTag,
  Text,
  TextTag,
  XmlComment,
  attribute,
  comment,
  declaration,
  emptyElementTag,
  // emptyElementTagWithAttributes,
  escapedChar,
  mixed,
  text,
  textTag,
} from "@/Sane"



// not sure why these don't pass
// parseTest("escapedChar - newline", escapedChar, `\n`, "\n")
// parseTest("escapedChar - tab", escapedChar, `\t`, "\t")


parseTest("attribute", attribute, `whatever="cool"`, Attribute("whatever", "cool"))

parseTest(
  "attribute with spaces",
  attribute,
  `whatever="cool school fool"`,
  Attribute("whatever", "cool school fool"),
)

parseTest(
  "attribute with escaped characters",
  attribute,
  `whatever="cool school\n\nfool"`,
  Attribute("whatever", "cool school\n\nfool"),
)

parseTest(
  "declaration",
  declaration,
  `<?xml version="1.0" encoding="ISO-8859-1"?>`,
  Declaration([Attribute("version", "1.0"), Attribute("encoding", "ISO-8859-1")]),
)

parseTest(
  "comment",
  comment,
  `<!-- This is totally a comment. -->`,
  XmlComment("This is totally a comment."),
)

parseTest(
  "emptyElementTag - with attributes",
  emptyElementTag,
  `<zipzap cool="nice" dope="nope" />`,
  EmptyTag("zipzap", [Attribute("cool", "nice"), Attribute("dope", "nope")]),
)

parseTest(
  "emptyElementTag - no attributes, no space",
  emptyElementTag,
  `<void/>`,
  EmptyTag("void", []),
)
parseTest(
  "emptyElementTag - no attributes, single space",
  emptyElementTag,
  `<void />`,
  EmptyTag("void", []),
)
parseTest(
  "emptyElementTag - no attributes, many spaces",
  emptyElementTag,
  `<void             />`,
  EmptyTag("void", []),
)
parseTest("textTag", textTag, `<p>I love paragraphs!</p>`, TextTag("p", "I love paragraphs!"))

/*
// this fails as expected!
parseTest(
  "textTag - no closing tag",
  textTag,
  `<p>I love paragraphs!`,
  TextTag("p", "I love paragraphs!"),
)
*/

parseTest("text", text, "This is text!", Text("This is text!"))
parseTest("text", text, "", Text(""))

parseTest("mixed", mixed, "<p>This is</p>", [])
