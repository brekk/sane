import { apL } from "Applicative"
import { mapLeft } from "Either"
import { always } from "Function"
import IO from "IO"
import List from "List"
import P from "Parse"
import String from "String"

import { mark } from "@/String"



export type Attribute = Attribute(String, String)
export alias Attributes = List Attribute

// <tag keyAttribute="keyValue">body</tag>
/**
 * XMLTags are composed of:
 * - tag - String
 * - attributes - List Attribute
 * - body - String
 */
export type XmlTag
  = Declaration(Attributes)
  | EmptyTag(String, Attributes)
  | Text(String)
  | TextTag(String, String)
  | ParentTag(XmlTag, List XmlTag)
  | XmlComment(String)

export alias XML = List XmlTag

declaration :: P.Parser XmlTag
export declaration = do {
  _ <- P.string("<?xml")
  attrs <- P.some(P.token(attribute))
  _ <- P.token(P.string("?>"))
  return pipe(
    Declaration,
    of,
  )(attrs)
}

comment :: P.Parser XmlTag
export comment = do {
  _ <- P.string("<!--")
  chars <- pipe(
    P.someTill($, P.lookAhead(P.string("-->"))),
  )(P.anyChar)
  _ <- P.token(P.string("-->"))
  return pipe(
    mark,
    XmlComment,
    of,
  )(chars)
}

spaces = pipe(
  P.char,
  P.many,
  map(always([])),
)(' ')

emptyElementTag :: P.Parser XmlTag
export emptyElementTag = do {
  _ <- P.char('<')
  tagStart <- pipe(
    P.manyTill(P.anyChar),
    map(mark),
  )(P.lookAhead(P.oneOf(['/', ' '])))
  attribution = P.manyTill(P.token(attribute), P.string("/>"))
  attrs <- attribution <|> spaces
  _ <- spaces
  _ <- P.string("/>")
  return pipe(
    EmptyTag($, attrs),
    of,
  )(tagStart)
}

textTag :: P.Parser XmlTag
export textTag = do {
  _ <- P.char('<')
  tagStart <- pipe(
    P.manyTill(P.anyChar),
    map(mark),
  )(P.lookAhead(P.oneOf([' ', '>'])))
  attrs <- P.manyTill(P.token(attribute), P.char('>')) <|> spaces
  _ <- spaces
  _ <- P.char('>')
  endTagParser = P.string("</" ++ tagStart ++ ">")
  txt <- pipe(
    P.manyTill(P.anyChar),
    map(mark),
  )(P.lookAhead(endTagParser))
  _ <- endTagParser
  return pipe(
    TextTag($, txt),
    of,
  )(tagStart)
}
export text = do {
  raw <- pipe(
    P.manyTill(P.notChar('<')),
    map(String.fromList),
  )(P.lookAhead(P.choice([P.eof, map(always({}), P.char('<'))])))
  return pipe(
    Text,
    of,
  )(raw)
}

export mixed = P.some(P.choice([text, textTag]))


attribute :: P.Parser Attribute
export attribute = do {
  key <- pipe(
    P.manyTill(P.anyChar),
    map(mark),
  )(P.lookAhead(P.string(`="`)))
  _ <- P.char('=')
  _ <- P.char('"')
  value <- pipe(
    map(String.singleton),
    alt($, escapedChar),
    P.many,
    map(List.reduce(mappend, "")),
  )(P.notOneOf(['"', '\\']))
  _ <- P.char('"')

  return pipe(
    Attribute(key),
    of,
  )(value)
}

escapedChar :: P.Parser String
export escapedChar = do {
  backslash <- P.char('\\')
  escaped <- P.anyChar
  return pipe(
    String.fromList,
    of,
  )([backslash, escaped])
}
